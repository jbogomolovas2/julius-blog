[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Julius’s blog\nData analysis shenanigans mostly in R"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Hello and welcome! I’m Julijus  Bogomolovas, a molecular cardiology researcher at UC San Diego who spends most days studying molecular signaling that keeps our hearts beating — but I unwind by pointing those same analytical instincts at whatever catches my curiosity, from swimming training to cherry blossom prediction.\n Think of this space as my digital lab notebook crossed with a Sunday afternoon hobby shed: you’ll find expanded write-ups of data analysis from my professional work, side quests where I teach myself new statistical tricks, and plenty of “vanity” explorations that look fun. \nI’m self‑taught in much of the data‑science tooling you’ll see here, so expect the occasional misstep, frank reflections on what I learned, and code and data you’re free to borrow or improve.\n If you’re into biostatistics, all things cardiac, R notebooks that actually run, or enjoy watching a scientist learn in public, pull up a chair and join the conversation."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Swimming speed Analysis With Generalized Additive Models",
    "section": "",
    "text": "As a swimmer seeking to enhance performance, tracking workout data can offer valuable insights into progress over time. Analysis options for swimming compared to running in Garmin are instead week. I enjoy swimming and data analysis. In this analysis, I’ll explore several years of swimming data extracted from Garmin FIT files to figure out if I am getting faster."
  },
  {
    "objectID": "posts/post-with-code/index.html#data-extraction-from-fit-files",
    "href": "posts/post-with-code/index.html#data-extraction-from-fit-files",
    "title": "Swimming speed Analysis With Generalized Additive Models",
    "section": "Data Extraction from FIT Files",
    "text": "Data Extraction from FIT Files\nFirst, I’ll extract swimming data from all available FIT files. The FITfileR (Smith 2025) package allows us to read Garmin workout files and identify pool swimming sessions.\n\nlibrary(FITfileR)\nlibrary(dplyr)\nlibrary(purrr)\nlibrary(utils)\nlibrary(ggplot2)\nlibrary(hexbin)\nlibrary(viridis)\nlibrary(gratia)\nlibrary(mgcv)\nlibrary(tidyr)\nlibrary(performance)\nlibrary(lubridate)\n\n\nIdentifying Pool Swimming Sessions\nSo, one can ask Garmin to download all the files. Swim session or activity files are stored in .fit format and located in the DI_CONNECT folder, specifically in the subfolder DI-Connect-Uploaded-Files. File names are rather cryptical, so I first look for files that have “lap_swimming” attribute within.\n\n# Scan directory for all .fit files\nall_files &lt;- list.files(\"/Users/jb/Documents/BW_analysis/Swim\",\n                        pattern    = \"\\\\.fit$\",\n                        full.names = TRUE)\n\n# Check each file to identify pool swimming sessions\nn  &lt;- length(all_files)\nok &lt;- logical(n)\npb &lt;- txtProgressBar(min = 0, max = n, style = 3)\n\nfor (i in seq_along(all_files)) {\n  path &lt;- all_files[i]\n  # Safely check if file contains pool swimming data\n  ok[i] &lt;- possibly(function(p) {\n    sp &lt;- getMessagesByType(readFitFile(p), \"sport\")\n    isTRUE(any(sp$sport == \"swimming\" & sp$sub_sport == \"lap_swimming\",\n               na.rm = TRUE))\n  }, otherwise = FALSE)(path)\n  setTxtProgressBar(pb, i)\n}\n\nclose(pb)\n\npool_lap_fits &lt;- all_files[ok]\ncat(\"\\nFound\", length(pool_lap_fits), \"pool-lap swim files\\n\")\n\n\n\nExtracting Session Information\nNow, by examining several lap_swimming attributes containing files, I found that pool length in meters and activity data are stored in session, and length contains the workout information. \n\nsessions &lt;- map_dfr(pool_lap_fits, function(f) {\n  sess &lt;- tryCatch(getMessagesByType(readFitFile(f), \"session\"),\n                   error = function(e) NULL)\n  if (is.null(sess)) return(NULL)\n  tibble(\n    file          = f,\n    session_date  = as.Date(sess$start_time),\n    pool_length   = sess$pool_length\n  )\n}) %&gt;%\n  group_by(session_date) %&gt;%\n  mutate(session_number = row_number()) %&gt;%\n  ungroup()\n\n# Extract individual length (lap) data\nraw_laps &lt;- map_dfr(pool_lap_fits, function(f) {\n  lengths &lt;- tryCatch(getMessagesByType(readFitFile(f), \"length\"),\n                      error = function(e) NULL)\n  if (is.null(lengths)) return(NULL)\n  lengths %&gt;% mutate(file = f)\n})"
  },
  {
    "objectID": "posts/post-with-code/index.html#data-processing-and-set-detection",
    "href": "posts/post-with-code/index.html#data-processing-and-set-detection",
    "title": "Swimming speed Analysis With Generalized Additive Models",
    "section": "Data Processing and Set Detection",
    "text": "Data Processing and Set Detection\nSwimming workouts typically consist of multiple sets with rest periods between each set. I’ll identify these sets and calculate the relative positions of each lap within the workout and set itself:\n\n#Identify sets based on idle periods\nlaps_with_sets &lt;- raw_laps %&gt;%\n  group_by(file) %&gt;%\n  mutate(\n    lap_index          = row_number(),\n    total_laps         = n(),\n    pos_within_workout = lap_index / total_laps,\n    # New set starts after each idle period\n    set_id             = cumsum(length_type == \"idle\") + 1\n  ) %&gt;%\n  ungroup()\n\n# Process active laps only and calculate set-specific metrics\nfinal_tbl &lt;- laps_with_sets %&gt;%\n  filter(length_type == \"active\", swim_stroke != \"drill\") %&gt;%\n  group_by(file, set_id) %&gt;%\n  mutate(\n    lap_in_set     = row_number(),\n    set_size       = n(),\n    pos_within_set = lap_in_set / set_size\n  ) %&gt;%\n  ungroup() %&gt;%\n  left_join(sessions, by = \"file\") %&gt;%\n  select(\n    session_date,\n    session_number,\n    pool_length,\n    total_elapsed_time,\n    set_id,\n    lap_index,\n    lap_in_set,\n    pos_within_workout,\n    pos_within_set,\n    swim_stroke\n  )\n\n# Save processed data\nwrite.csv(final_tbl, \"all_swim_laps.csv\", row.names = FALSE)\n\nI’ll identify gaps in training and analyze data from July 2020 onward to have a nice, recent, and consistent training segment to analyze.\n\n# Identify training gaps\nsessions_df &lt;- final_tbl %&gt;%\n  distinct(session_date) %&gt;%\n  arrange(session_date)\n\ngaps_df &lt;- sessions_df %&gt;%\n  # 1) make sure session_date is a Date\n  mutate(session_date = as.Date(session_date)) %&gt;%\n  # 2) grab the “previous” date\n  mutate(prev_date = lag(session_date)) %&gt;%\n  # 3) compute gap in days\n  mutate(gap_days = as.numeric(difftime(session_date, prev_date, units = \"days\"))) %&gt;%\n  # 4) drop the first row (where lag was NA)\n  filter(!is.na(gap_days))\n\n# Show top 5 largest training gaps\ntop5_gaps &lt;- gaps_df %&gt;%\n  arrange(desc(gap_days)) %&gt;%\n  slice(1:5) %&gt;%\n  rename(\n    end_date   = session_date,\n    start_date = prev_date\n  )\n\nprint(top5_gaps)\n\nLet’s perform some data cleaning: select a segment, calculate swim speeds, remove super-fast laps (I wish they were real!), and create a simple time variable.\n\nfinal_tbl_2020 &lt;- final_tbl %&gt;%\n  # 1) ensure session_date is Date\n  mutate(session_date = as.Date(session_date)) %&gt;%\n  \n  # 2) filter from July 7, 2020 onward\n  filter(session_date &gt;= ymd(\"2020-07-07\")) %&gt;%\n  \n  # 3) compute speed and factor columns\n  mutate(\n    speed       = pool_length / total_elapsed_time,\n    swim_stroke = factor(swim_stroke),\n    session_id  = factor(session_date)   # or combine with session_number if you need uniqueness\n  ) %&gt;%\n  \n  # 4) remove unrealistically fast laps\n  filter(speed &lt; 2.5) %&gt;%\n  \n  # 5) sort and compute days since first session\n  arrange(session_date) %&gt;%\n  mutate(\n    days_since_start = as.integer(\n      difftime(session_date,\n               min(session_date),\n               units = \"days\")\n    )\n  )"
  },
  {
    "objectID": "posts/post-with-code/index.html#visualizing-speed-distributions",
    "href": "posts/post-with-code/index.html#visualizing-speed-distributions",
    "title": "Swimming speed Analysis With Generalized Additive Models",
    "section": "Visualizing Speed Distributions",
    "text": "Visualizing Speed Distributions\nLet’s examine how swimming speed varies over time for different strokes. As I have a bunch of laps, let’s plot them as densities.\n\np_contour &lt;- ggplot() +\n  geom_point(data = final_tbl_2020, \n             aes(x = session_date, y = speed),\n             alpha = 0.05, size = 0.5, color = \"grey50\") +\n  geom_density_2d(data = final_tbl_2020, \n                  aes(x = session_date, y = speed),\n                  color = \"darkblue\", bins = 10, linewidth = 0.5) +\n  facet_wrap(~ swim_stroke, scales = \"free_y\", ncol = 2) +\n  labs(x = \"Session Date\",\n       y = \"Speed (m/s)\",\n       title = \"Swimming Speed Over Time by Stroke Type\",\n       subtitle = \"Density contours showing speed distribution\") +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        panel.grid.minor = element_blank(),\n        strip.text = element_text(size = 12, face = \"bold\"))\n\nprint(p_contour)"
  },
  {
    "objectID": "posts/post-with-code/index.html#statistical-modeling-with-gams",
    "href": "posts/post-with-code/index.html#statistical-modeling-with-gams",
    "title": "Swimming speed Analysis With Generalized Additive Models",
    "section": "Statistical Modeling with GAMs",
    "text": "Statistical Modeling with GAMs\nI have something that is more or less monomodal. Therefore, my average swim speed would be a good indicator of my progress. However, in workouts, I do different sets, such as sprints, cooldowns, etc. Which vary in intensity, length, and position within the workout. I hypothesize that these factors significantly affect “average” swim speed and need to be accounted for. I don’t expect them to be linearly related, so I enter the magical world of Generalized Additive Models (GAMs). I will be using mgcv (Wood 2011) for fitting, gratia (Simpson 2024) for visualization, and performance (Lüdecke et al. 2021) for model assessment. I will start with a simple speed ~ time model and try to add covariates to get a better fit, closer to “average” swim speed. As I am working with a rather large dataset, I will use the bam function and a few corresponding tweaks: discrete = TRUE and method = \"fREML\" which enables faster computation for extensive datasets. By examining the swimming speed distribution, I clearly see some tails, so I will use the scaled t-distribution family = scat(). \n\n# Model 1: Simple time trend by stroke\nsimple &lt;- bam(\n    speed ~ swim_stroke + pool_length + \n            s(days_since_start, by = swim_stroke, bs = \"gp\"),\n    data     = final_tbl_2020,\n    discrete = TRUE,\n    family   = scat(),  # Scaled t-distribution for robustness\n    method   = \"fREML\"\n)\n\n# Model 2: Add position effects (fatigue within workout/set)\nset_location &lt;- bam(\n    speed ~ swim_stroke + pool_length + \n            s(days_since_start, by = swim_stroke, bs = \"gp\") + \n            s(pos_within_workout, by = swim_stroke) +\n            s(pos_within_set, by = swim_stroke),\n    data     = final_tbl_2020,\n    discrete = TRUE,\n    family   = scat(),\n    method   = \"fREML\"\n)\n\n# Model 3: Add session random effects\nset_location_re &lt;- bam(\n    speed ~ swim_stroke + pool_length + \n            s(days_since_start, by = swim_stroke, bs = \"gp\") +\n            s(pos_within_workout, by = swim_stroke) +\n            s(pos_within_set, by = swim_stroke) +\n            s(session_id, bs = \"re\"),  # Random effect for sessions\n    data     = final_tbl_2020,\n    discrete = TRUE,\n    family   = scat(),\n    method   = \"fREML\"\n)\n\n# Compare model performance\nmodel_comparison &lt;- compare_performance(simple, set_location, set_location_re)\nprint(model_comparison)\n\n# Comparison of Model Performance Indices\n\nName            | Model |    AIC (weights) |   AICc (weights)\n-------------------------------------------------------------\nsimple          |   bam | -60982.5 (&lt;.001) | -60982.4 (&lt;.001)\nset_location    |   bam | -78903.1 (&lt;.001) | -78902.5 (&lt;.001)\nset_location_re |   bam | -81777.9 (&gt;.999) | -81765.5 (&gt;.999)\n\nName            |    BIC (weights) |    R2 |  RMSE | Sigma\n----------------------------------------------------------\nsimple          | -60631.1 (&lt;.001) | 0.204 | 0.123 | 1.000\nset_location    | -78017.1 (&gt;.999) | 0.449 | 0.101 | 1.000\nset_location_re | -77560.3 (&lt;.001) | 0.475 | 0.099 | 1.000\n\nmodel_summary&lt;- summary(set_location_re)\nprint(model_summary)\n\n\nFamily: Scaled t(3.729,0.064) \nLink function: identity \n\nFormula:\nspeed ~ swim_stroke + pool_length + s(days_since_start, by = swim_stroke, \n    bs = \"gp\") + s(pos_within_workout, by = swim_stroke) + s(pos_within_set, \n    by = swim_stroke) + s(session_id, bs = \"re\")\n\nParametric coefficients:\n                          Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)              0.8914292  0.0049522  180.01   &lt;2e-16 ***\nswim_strokebreaststroke  0.0613416  0.0052787   11.62   &lt;2e-16 ***\nswim_strokebutterfly     0.2525302  0.0047424   53.25   &lt;2e-16 ***\nswim_strokefreestyle     0.2141422  0.0031635   67.69   &lt;2e-16 ***\npool_length             -0.0017971  0.0001487  -12.09   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nApproximate significance of smooth terms:\n                                                  edf  Ref.df        F  p-value\ns(days_since_start):swim_strokebackstroke       6.088   6.963    7.448  &lt; 2e-16\ns(days_since_start):swim_strokebreaststroke     5.747   6.583    4.031 0.000274\ns(days_since_start):swim_strokebutterfly        7.962   8.641    7.520  &lt; 2e-16\ns(days_since_start):swim_strokefreestyle        8.047   8.390    7.933  &lt; 2e-16\ns(pos_within_workout):swim_strokebackstroke     2.495   3.100    4.059 0.006375\ns(pos_within_workout):swim_strokebreaststroke   7.311   8.292   20.984  &lt; 2e-16\ns(pos_within_workout):swim_strokebutterfly      6.725   7.816   12.175  &lt; 2e-16\ns(pos_within_workout):swim_strokefreestyle      8.375   8.888  312.136  &lt; 2e-16\ns(pos_within_set):swim_strokebackstroke         8.232   8.778  163.531  &lt; 2e-16\ns(pos_within_set):swim_strokebreaststroke       8.347   8.804  514.321  &lt; 2e-16\ns(pos_within_set):swim_strokebutterfly          8.474   8.888  500.872  &lt; 2e-16\ns(pos_within_set):swim_strokefreestyle          8.838   8.990 1051.382  &lt; 2e-16\ns(session_id)                                 390.899 449.000    8.486  &lt; 2e-16\n                                                 \ns(days_since_start):swim_strokebackstroke     ***\ns(days_since_start):swim_strokebreaststroke   ***\ns(days_since_start):swim_strokebutterfly      ***\ns(days_since_start):swim_strokefreestyle      ***\ns(pos_within_workout):swim_strokebackstroke   ** \ns(pos_within_workout):swim_strokebreaststroke ***\ns(pos_within_workout):swim_strokebutterfly    ***\ns(pos_within_workout):swim_strokefreestyle    ***\ns(pos_within_set):swim_strokebackstroke       ***\ns(pos_within_set):swim_strokebreaststroke     ***\ns(pos_within_set):swim_strokebutterfly        ***\ns(pos_within_set):swim_strokefreestyle        ***\ns(session_id)                                 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nR-sq.(adj) =  0.475   Deviance explained = 42.7%\nfREML =  65732  Scale est. = 1         n = 39572\n\nappraise(set_location_re)\n\n\n\n\n\n\n\n\nBased on model comparison, the most complex one seems to be doing the best.  Some sanity check: indeed, backstroke is my slowest stroke, whereas butterfly is the fastest, and swimming in a 50 m pool vs. a 25-yard pool slows me a bit. In terms of fixed effects, the model effectively captured them.  Smooth terms revealed significant nonlinear trends over time for all strokes, even when accounted for lap temporal position and session as a random factor. So let’s have a look. \n\ngratia::draw(set_location_re,select=1:4 )\n\n\n\n\n\n\n\n\nI am getting faster with my strokes, but I am plateauing with my freestyle. Let’s create predictions from our best model and overlay them on the actual data: \n\n# Create prediction dataset\npred_data &lt;- expand.grid(\n  days_since_start = seq(min(final_tbl_2020$days_since_start), \n                        max(final_tbl_2020$days_since_start), \n                        length.out = 200),\n  swim_stroke = levels(final_tbl_2020$swim_stroke),\n  stringsAsFactors = FALSE\n)\n\n# Set other variables to median/reference values\npred_data$pool_length &lt;- min(final_tbl_2020$pool_length) #most of my workouts are in 25 yards\npred_data$pos_within_workout &lt;- median(final_tbl_2020$pos_within_workout)\npred_data$pos_within_set &lt;- median(final_tbl_2020$pos_within_set)\npred_data$session_id &lt;- levels(final_tbl_2020$session_id)[1]\n\n# Generate predictions (excluding random effects)\npredictions &lt;- predict(set_location_re, \n                      newdata = pred_data, \n                      exclude = \"s(session_id)\",\n                      se.fit = TRUE)\n\npred_data$fit &lt;- predictions$fit\npred_data$se &lt;- predictions$se.fit\n# Validation plot\np_validation &lt;- ggplot() +\n  # Scatter with very low alpha for context\n  geom_point(data = final_tbl_2020, \n             aes(x = days_since_start, y = speed),\n             alpha = 0.05, size = 0.5, color = \"grey50\") +\n  # 2D density contour lines\n  geom_density_2d(data = final_tbl_2020, \n                  aes(x = days_since_start, y = speed),\n                  color = \"darkblue\", bins = 10, size = 0.5) +\n  # Model smooth lines only - no CI\n  geom_line(data = pred_data,\n            aes(x = days_since_start, y = fit),\n            color = \"red\", size = 1.5) +\n  # Facet by stroke type\n  facet_wrap(~ swim_stroke, scales = \"free_y\", ncol = 2) +\n  # Labels and theme\n  labs(x = \"Days Since Start\",\n       y = \"Speed (m/s)\",\n       title = \"Swimming Speed Over Time by Stroke Type\",\n       subtitle = \"Density contours with GAM smooth curves\") +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        panel.grid.minor = element_blank(),\n        strip.text = element_text(size = 12, face = \"bold\"))\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\nprint(p_validation)\n\n\n\n\n\n\n\n\nAlthough structured test sets would be ideal for tracking progress, even this messy lap-level data can already provide some insights. Overall, the model indicates that my backstroke, breaststroke, and butterfly are improving (which I have noticed myself), while freestyle still lags behind. Extending the analysis to quartiles or deciles of lap speeds should provide a more comprehensive picture of training progress and pacing strategies."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Julius’s Blog",
    "section": "",
    "text": "Swimming speed Analysis With Generalized Additive Models\n\n\n\nnews\n\ncode\n\nanalysis\n\n\n\n\n\n\n\n\n\nJun 23, 2025\n\n\nJulius Bogomolovas\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nJun 20, 2025\n\n\nJulius Bogomolovas\n\n\n\n\n\nNo matching items"
  }
]